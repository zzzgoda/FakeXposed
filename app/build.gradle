/*
 * Copyright (c) 2021 FakeXposed by sanfengAndroid.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import java.nio.file.Paths

plugins {
    id 'com.android.application'
}
// Android NDK新版不包含Api 25,切换低版本NDK会引起不必要的兼容代码
def highHookModuleName = 'hookh'
def lowHookModuleName = 'hookl'
def hookModuleName = (rootProject.props['buildApi'] ?: rootProject.targetSdk) >= 24 ? highHookModuleName : lowHookModuleName
def mVersionCode = 1500
def mVersionName = "1.5"
def appType = rootProject.props['appType']
android {
    compileSdkVersion 30
    if (rootProject.props['hasSign']) {
        signingConfigs {
            sign {
                storeFile file(rootProject.props['storeFile'])
                storePassword rootProject.props['storePassword']
                keyAlias rootProject.props['keyAlias']
                keyPassword rootProject.props['keyPassword']
            }
        }
    }
    defaultConfig {
        applicationId "com.sanfengandroid.datafilter"
        minSdkVersion 21
        targetSdkVersion rootProject.targetSdk
        versionCode mVersionCode
        versionName mVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags ""
                cFlags ""
                abiFilters.addAll(rootProject.props['abis'] ?: ['armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'])
                arguments '-DANDROID_PLATFORM=' + (rootProject.props['buildApi']), "-DHOOK_MODULE_NAME=${hookModuleName}",
                        '-DMERGE_BUILD=' + rootProject.props['mergeBuild'],
                        '-DHOOK_LOG_LEVEL=' + (rootProject.props['logLevel']),
                        "-DMODULE_VERSION=${mVersionCode}",
                        "-DMODULE_VERSION_NAME=\"${mVersionName}\""
            }
        }
        buildConfigField 'String', 'HOOK_MODULE_NAME', "\"${hookModuleName}\""
        buildConfigField 'String', 'HOOK_HIGH_MODULE_NAME', "\"${highHookModuleName}\""
        buildConfigField 'String', 'HOOK_LOW_MODULE_NAME', "\"${lowHookModuleName}\""
        buildConfigField 'String', 'APP_TYPE', "\"${appType}\""

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (rootProject.props['hasSign']) {
                signingConfig signingConfigs.sign
            }
        }
        debug {
            if (rootProject.props['hasSign']) {
                signingConfig signingConfigs.sign
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    buildToolsVersion '30.0.3'
    ndkVersion '22.0.7026061'
    applicationVariants.all { variant ->
        def buildType = variant.buildType.name
        variant.sourceSets.each {
            it.jniLibs.srcDirs = ["src/main/libs/${buildType}"]
        }
        variant.outputs.all {
            outputFileName = "datafilter-${buildType}-${mVersionName}-${appType}.apk"
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('merge') && task.name.endsWith('JniLibFolders')) {
        task.doLast {
            it.outputs.files.files.each { File dir ->
                dir.eachDir {
                    if (appType == 'x86' && (it.name == 'armeabi-v7a' || it.name == 'arm64-v8a')) {
                        it.deleteDir()
                    } else if (appType == 'arm' && (it.name == 'x86' || it.name == 'x86_64')) {
                        it.deleteDir()
                    }
                }
                dir.eachFileRecurse {
                    if (it.parentFile.name == 'x86_64' || it.parentFile.name == 'arm64-v8a') {
                        if (!rootProject.props['mergeBuild'] && it.name == "lib${hookModuleName}64.so") {
                            println "delete current build hook module: ${it.name}"
                            it.delete()
                        }
                    } else if (it.name == "lib${hookModuleName}.so") {
                        println "delete building library: ${it.absolutePath}"
                        it.delete()
                    }
                }
            }
        }
    } else if (name == "shrinkReleaseRes") {
        finalizedBy resOptimize
    }
}

task resOptimize {
    doLast {
        def aapt2 = Paths.get(project.android.sdkDirectory.path, "build-tools", project.android.buildToolsVersion, "aapt2")
        def zip = Paths.get(project.buildDir.path, "intermediates", "shrunk_processed_res", "release", "resources-release-stripped.ap_")
        def optimized = new File("${zip}.opt")
        def cmd = exec {
            commandLine(aapt2, "optimize", "--collapse-resource-names", "--shorten-resource-paths", "-o", optimized, zip)
            setIgnoreExitValue(true)
        }
        if (cmd.exitValue == 0) {
            zip.toFile().delete()
            optimized.renameTo(zip.toFile())
        }
    }
}


dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly(project(':framework-compile'))
    implementation(project(':fake-linker'))
}